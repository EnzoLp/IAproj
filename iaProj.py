import matplotlib.pyplot as plt                                                                          # LIPARI Enzo BAT3
import pandas as pd
import numpy as np
from sklearn import linear_model
from sklearn.metrics import r2_score 
from io import StringIO

data = """
Date,Dernier,Ouv.,Plus Haut,Plus Bas,Vol.,Variation %
"22/09/2024","62.730,4","63.351,2","63.441,2","62.557,6","35,63K","-0,98%"
"21/09/2024","63.348,1","63.201,2","63.526,3","62.778,6","33,20K","0,23%"
"20/09/2024","63.201,2","62.942,4","64.085,1","62.367,1","90,65K","0,42%"
"19/09/2024","62.938,6","61.754,8","63.849,6","61.596,5","120,17K","1,91%"
"18/09/2024","61.757,6","60.308,5","61.757,6","59.210,7","105,57K","2,40%"
"17/09/2024","60.309,1","58.213,1","61.309,0","57.630,2","106,30K","3,60%"
"16/09/2024","58.213,1","59.126,2","59.204,3","57.527,8","87,60K","-1,56%"
"15/09/2024","59.138,5","59.995,6","60.377,6","58.717,9","47,01K","-1,43%"
"14/09/2024","59.995,4","60.514,8","60.609,4","59.494,3","44,47K","-0,85%"
"13/09/2024","60.511,6","58.134,4","60.625,4","57.656,8","102,12K","4,09%"
"12/09/2024","58.134,5","57.335,5","58.484,1","57.329,6","98,42K","1,39%"
"11/09/2024","57.338,7","57.638,0","57.975,9","55.576,6","102,15K","-0,51%"
"10/09/2024","57.635,0","57.045,6","58.019,9","56.415,3","77,65K","1,03%"
"09/09/2024","57.049,6","54.868,0","57.956,7","54.595,4","105,33K","3,99%"
"08/09/2024","54.861,3","54.161,4","55.292,7","53.642,4","51,99K","1,30%"
"07/09/2024","54.156,5","53.965,0","54.819,2","53.754,3","58,11K","0,35%"
"06/09/2024","53.966,8","56.179,7","56.969,1","52.644,6","155,84K","-3,94%"
"05/09/2024","56.183,2","57.970,7","58.318,9","55.744,6","90,36K","-3,09%"
"04/09/2024","57.973,4","57.490,4","58.508,8","55.732,1","108,44K","0,86%"
"03/09/2024","57.479,8","59.133,7","59.799,7","57.436,9","74,77K","-2,80%"
"02/09/2024","59.134,0","57.309,0","59.416,6","57.185,8","73,18K","3,17%"
"01/09/2024","57.315,7","58.975,7","59.058,7","57.232,4","63,95K","-2,82%"
"31/08/2024","58.978,6","59.120,4","59.447,0","58.761,1","30,86K","-0,24%"
"30/08/2024","59.119,7","59.371,7","59.817,6","57.874,7","87,31K","-0,43%"
"29/08/2024","59.373,5","59.027,3","61.150,6","58.807,1","87,19K","0,61%"
"28/08/2024","59.016,0","59.425,6","60.198,4","57.912,1","109,47K","-0,73%"
"27/08/2024","59.450,9","62.832,2","63.201,4","58.187,3","108,53K","-5,40%"
"26/08/2024","62.846,2","64.240,7","64.472,5","62.841,1","68,89K","-2,22%"
"25/08/2024","64.273,2","64.160,7","64.939,2","63.796,6","41,61K","0,18%"
"24/08/2024","64.159,3","64.061,7","64.458,9","63.579,5","54,14K","0,17%"
"23/08/2024","64.053,1","60.374,7","64.830,1","60.354,4","125,50K","6,10%"
"22/08/2024","60.372,2","61.158,3","61.399,7","59.815,8","74,39K","-1,29%"
"21/08/2024","61.158,1","59.010,0","61.812,0","58.831,1","91,31K","3,65%"
"20/08/2024","59.005,8","59.470,3","61.331,6","58.612,0","69,77K","-0,78%"
"19/08/2024","59.470,9","58.445,8","59.598,5","57.872,0","49,19K","1,75%"
"18/08/2024","58.446,3","59.485,4","60.216,3","58.436,1","30,82K","-1,74%"
"17/08/2024","59.483,1","58.877,8","59.659,5","58.825,5","18,51K","1,03%"
"16/08/2024","58.877,2","57.545,1","59.817,3","57.129,1","64,01K","2,33%"
"15/08/2024","57.534,6","58.710,1","59.831,4","56.275,7","81,47K","-2,00%"
"14/08/2024","58.707,8","60.594,6","61.543,0","58.491,2","64,79K","-3,11%"
"13/08/2024","60.595,2","59.350,2","61.537,0","58.492,4","62,92K","2,10%"
"12/08/2024","59.350,0","58.711,7","60.606,2","57.689,0","79,31K","1,08%"
"11/08/2024","58.713,3","60.929,8","61.677,3","58.388,7","41,06K","-3,64%"
"10/08/2024","60.931,7","60.844,5","61.344,5","60.264,2","22,91K","0,13%"
"09/08/2024","60.850,6","61.697,8","61.712,3","59.570,2","69,55K","-1,38%"
"08/08/2024","61.699,7","55.112,8","62.563,5","54.786,9","109,77K","11,94%"
"07/08/2024","55.120,9","56.049,9","57.669,6","54.598,5","94,52K","-1,67%"
"06/08/2024","56.057,8","54.010,8","57.025,6","53.998,2","113,89K","3,85%"
"05/08/2024","53.979,0","58.142,9","58.291,4","49.486,9","333,46K","-7,16%"
"04/08/2024","58.141,8","60.700,2","61.086,5","57.346,9","72,71K","-4,21%"
"03/08/2024","60.696,7","61.480,8","62.184,2","59.914,6","65,74K","-1,27%"
"02/08/2024","61.478,7","65.351,8","65.567,1","61.242,3","93,89K","-5,96%"
"01/08/2024","65.372,9","64.625,7","65.587,9","62.303,9","84,20K","1,16%"
"31/07/2024","64.626,0","66.185,4","66.825,6","64.538,3","51,52K","-2,36%"
"30/07/2024","66.184,9","66.796,1","66.998,3","65.328,7","54,43K","-0,92%"
"29/07/2024","66.798,7","68.256,3","70.000,2","66.544,5","85,67K","-2,14%"
"28/07/2024","68.256,3","67.888,9","68.291,9","67.067,8","26,17K","0,61%"
"27/07/2024","67.843,1","67.910,8","69.387,6","66.776,8","67,99K","-0,10%"
"26/07/2024","67.908,6","65.799,7","68.205,0","65.764,3","59,13K","3,21%"
"25/07/2024","65.799,3","65.363,9","66.088,6","63.500,9","77,46K","0,66%"
"24/07/2024","65.370,5","65.936,8","67.072,1","65.155,2","52,47K","-0,86%"
"23/07/2024","65.937,8","67.550,4","67.750,2","65.512,9","69,58K","-2,39%"
"22/07/2024","67.553,6","68.158,4","68.468,9","66.601,8","54,88K","-0,89%"
"21/07/2024","68.158,7","67.147,8","68.352,9","65.825,6","47,19K","1,50%"
"20/07/2024","67.148,5","66.677,0","67.586,4","66.257,4","32,94K","0,71%"
"19/07/2024","66.677,4","63.981,2","67.390,4","63.326,1","82,87K","4,22%"
"18/07/2024","63.980,5","64.090,4","65.102,0","63.253,5","51,27K","-0,17%"
"17/07/2024","64.089,2","65.052,8","66.051,5","63.897,5","66,11K","-1,48%"
"16/07/2024","65.049,7","64.749,2","65.319,5","62.430,8","93,63K","0,41%"
"15/07/2024","64.782,4","60.794,7","64.869,5","60.678,8","96,02K","6,56%"
"14/07/2024","60.794,9","59.207,9","61.326,9","59.207,9","47,48K","2,68%"
"13/07/2024","59.209,8","57.897,4","59.826,5","57.770,6","34,28K","2,29%"
"12/07/2024","57.885,1","57.338,3","58.520,9","56.575,7","56,84K","0,96%"
"11/07/2024","57.337,3","57.745,9","59.404,4","57.095,0","66,40K","-0,71%"
"10/07/2024","57.746,7","58.040,2","59.393,8","57.185,3","59,60K","-0,50%"
"09/07/2024","58.039,4","56.721,3","58.234,0","56.306,3","64,25K","2,32%"
"08/07/2024","56.724,7","55.850,2","58.115,8","54.320,0","102,91K","1,55%"
"07/07/2024","55.861,1","58.240,2","58.394,6","55.756,3","41,12K","-4,12%"
"06/07/2024","58.259,2","56.640,0","58.462,0","56.026,8","46,91K","2,86%"
"05/07/2024","56.641,8","57.025,7","57.471,1","53.883,4","175,51K","-0,67%"
"04/07/2024","57.026,3","60.201,4","60.463,0","56.812,7","116,38K","-5,27%"
"03/07/2024","60.199,3","62.104,9","62.263,6","59.466,6","73,34K","-3,07%"
"02/07/2024","62.103,3","62.888,3","63.257,0","61.797,6","46,52K","-1,25%"
"01/07/2024","62.890,1","62.768,8","63.842,1","62.558,0","59,94K","0,22%"
"30/06/2024","62.754,3","60.973,1","63.006,6","60.703,7","37,21K","2,92%"
"29/06/2024","60.973,4","60.403,7","61.192,8","60.382,8","26,56K","0,94%"
"28/06/2024","60.403,3","61.684,6","62.175,4","60.081,9","58,95K","-2,08%"
"27/06/2024","61.685,3","60.848,3","62.351,2","60.629,4","48,79K","1,37%"
"26/06/2024","60.849,4","61.809,9","62.469,4","60.715,1","54,95K","-1,55%"
"25/06/2024","61.809,4","60.292,0","62.266,0","60.262,2","77,28K","2,52%"
"24/06/2024","60.292,7","63.201,6","63.357,1","58.589,9","120,60K","-4,59%"
"23/06/2024","63.196,2","64.261,0","64.518,9","63.195,3","19,94K","-1,66%"
"22/06/2024","64.261,0","64.131,9","64.523,9","63.944,0","17,55K","0,21%"
"21/06/2024","64.128,5","64.854,3","65.054,9","63.427,9","60,86K","-1,12%"
"20/06/2024","64.854,3","64.982,1","66.474,2","64.566,7","56,24K","-0,19%"
"19/06/2024","64.980,9","65.159,8","65.706,4","64.705,6","42,96K","-0,27%"
"18/06/2024","65.159,9","66.495,7","66.571,2","64.098,4","93,72K","-2,01%"
"17/06/2024","66.498,8","66.672,9","67.253,8","65.115,4","66,09K","-0,26%"
"16/06/2024","66.674,7","66.223,0","66.951,4","66.038,1","20,74K","0,68%"
"15/06/2024","66.223,0","66.034,1","66.446,4","65.895,1","24,05K","0,29%"
"14/06/2024","66.034,8","66.775,2","67.347,7","65.076,5","65,18K","-1,11%"
"13/06/2024","66.773,1","68.260,6","68.384,6","66.324,3","66,36K","-2,18%"
"12/06/2024","68.260,1","67.320,9","69.990,8","66.911,5","85,55K","1,40%"
"11/06/2024","67.319,8","69.537,9","69.573,3","66.197,8","96,70K","-3,19%"
"10/06/2024","69.538,2","69.650,2","70.152,5","69.259,9","39,12K","-0,16%"
"09/06/2024","69.650,6","69.310,5","69.847,8","69.136,7","20,99K","0,49%"
"08/06/2024","69.310,1","69.347,0","69.572,1","69.222,4","23,03K","-0,05%"
"07/06/2024","69.347,9","70.793,4","71.956,5","68.620,7","82,62K","-2,04%"
"06/06/2024","70.791,5","71.083,6","71.616,1","70.178,7","49,79K","-0,41%"
"05/06/2024","71.083,7","70.550,9","71.744,4","70.397,1","67,06K","0,76%"
"04/06/2024","70.549,2","68.808,0","71.034,2","68.564,3","75,69K","2,53%"
"03/06/2024","68.807,8","67.763,3","70.131,0","67.616,8","69,42K","1,53%"
"02/06/2024","67.773,5","67.760,8","68.447,5","67.330,6","30,63K","0,02%"
"01/06/2024","67.760,8","67.533,9","67.861,0","67.449,6","19,01K","0,34%"
"31/05/2024","67.530,1","68.352,3","69.018,2","66.676,8","61,51K","-1,21%"
"30/05/2024","68.354,7","67.631,3","69.504,7","67.138,4","66,84K","1,06%"
"29/05/2024","67.635,8","68.366,2","68.897,6","67.143,2","52,13K","-1,07%"
"28/05/2024","68.366,0","69.428,3","69.560,7","67.299,9","71,39K","-1,53%"
"27/05/2024","69.428,7","68.514,6","70.638,3","68.275,2","49,07K","1,33%"
"26/05/2024","68.514,8","69.287,2","69.494,0","68.294,5","24,58K","-1,11%"
"25/05/2024","69.284,4","68.548,2","69.558,8","68.516,1","25,17K","1,07%"
"24/05/2024","68.547,6","67.971,1","69.212,0","66.685,8","63,28K","0,84%"
"23/05/2024","67.975,7","69.166,3","70.041,0","66.578,1","89,45K","-1,71%"
"22/05/2024","69.155,4","70.141,0","70.593,4","69.024,3","65,08K","-1,40%"
"21/05/2024","70.139,9","71.430,5","71.872,0","69.181,7","108,56K","-1,80%"
"20/05/2024","71.422,7","66.278,3","71.482,8","66.076,5","112,66K","7,76%"
"19/05/2024","66.279,1","66.919,0","67.662,5","65.937,3","36,19K","-0,95%"
"18/05/2024","66.917,5","67.036,6","67.361,4","66.636,1","29,68K","-0,18%"
"17/05/2024","67.036,8","65.231,1","67.420,7","65.121,7","63,09K","2,77%"
"16/05/2024","65.231,0","66.219,6","66.643,9","64.623,3","72,55K","-1,50%"
"15/05/2024","66.225,1","61.569,4","66.417,1","61.357,5","106,05K","7,56%"
"14/05/2024","61.569,4","62.936,8","63.102,6","61.156,9","68,84K","-2,17%"
"13/05/2024","62.937,2","61.480,5","63.443,2","60.779,0","70,55K","2,37%"
"12/05/2024","61.480,0","60.826,6","61.847,7","60.647,1","27,40K","1,07%"
"11/05/2024","60.826,6","60.796,8","61.487,5","60.499,3","27,50K","0,05%"
"10/05/2024","60.796,9","63.074,3","63.454,3","60.251,8","79,33K","-3,61%"
"09/05/2024","63.075,0","61.207,3","63.413,3","60.671,4","64,22K","3,05%"
"08/05/2024","61.207,5","62.304,9","62.997,4","60.894,2","56,47K","-1,78%"
"07/05/2024","62.317,7","63.163,1","64.361,0","62.294,1","59,74K","-1,34%"
"06/05/2024","63.163,1","64.005,8","65.448,8","62.730,7","77,68K","-1,32%"
"05/05/2024","64.006,4","63.897,7","64.587,2","62.923,9","40,51K","0,18%"
"04/05/2024","63.888,3","62.887,1","64.466,0","62.599,1","53,03K","1,61%"
"03/05/2024","62.877,5","59.104,3","63.298,4","58.830,8","100,46K","6,35%"
"02/05/2024","59.121,3","58.334,9","59.548,0","56.989,8","98,06K","1,35%"
"01/05/2024","58.331,2","60.665,0","60.827,5","56.643,5","171,55K","-3,85%"
"30/04/2024","60.666,6","63.852,4","64.700,2","59.228,7","121,04K","-5,00%"
"29/04/2024","63.860,1","63.113,7","64.193,1","61.837,2","67,26K","1,19%"
"28/04/2024","63.109,7","63.457,9","64.346,1","62.827,8","36,65K","-0,55%"
"27/04/2024","63.456,8","63.765,8","63.916,7","62.507,7","45,34K","-0,49%"

"""  


df = pd.read_csv("BitcoinData.csv", sep=",", decimal=",", thousands=".") 

# Conversion de la date
df['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%Y')

# Selection des colonnes pour la visualisation
cdf = df[['Dernier', 'Ouv.', 'Plus Haut', 'Plus Bas']]

print(cdf.head(10))

print(cdf.describe())

#creation des histogrammes
plt.figure(figsize=(14, 10))
for i, column in enumerate(cdf.columns, 1):
    plt.subplot(2, 2, i)  # grille 2x2 pour les histogrammes
    plt.hist(cdf[column], bins=20, color='blue', alpha=0.7)
    plt.title(column)
    plt.xlabel(column)
    plt.ylabel('Frequence')

plt.tight_layout()  
plt.show()  
# Chargement des données
df = pd.read_csv(StringIO(data), delimiter=',', decimal=',', thousands='.')

# Affichage des noms des colonnes pour vérification
print("Noms des colonnes :", df.columns.tolist())


df.columns = df.columns.str.strip()

# Fonction pour convertir les colonnes 
def convert_to_float(value):
    if isinstance(value, str):
        value = value.replace('.', '').replace(',', '.')
        if 'K' in value:
            return float(value.replace('K', '').strip()) * 1000
        return float(value)
    return value


for col in ['Dernier', 'Ouv.', 'Plus Haut', 'Plus Bas', 'Vol.']:
    df[col] = df[col].astype(str).apply(convert_to_float)

# Correction du format de la date
df['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%Y')

# Conversion de la colonne 'Date' en nombre de jours écoulés depuis la première date
df['Date_numeric'] = (df['Date'] - df['Date'].min()).dt.days

# Créer un DataFrame avec les colonnes nécessaires
cdf = df[['Date_numeric', 'Plus Haut']]

# Visualisation des données
plt.scatter(cdf['Date_numeric'], cdf['Plus Haut'], color='b')
plt.xlabel("Date (jours depuis le début)")
plt.ylabel("Prix Plus Haut")
plt.title("Visualisation du plus haut cours journalier du Bitcoin sur 150jours")
plt.show()

# Diviser les données en ensembles d'entraînement et de test
msk = np.random.rand(len(df)) < 0.8
train = cdf[msk]
test = cdf[~msk]

# Créer un modèle de régression linéaire
regr = linear_model.LinearRegression()
train_x = np.asanyarray(train[['Date_numeric']])
train_y = np.asanyarray(train[['Plus Haut']])
regr.fit(train_x, train_y)

# Afficher les coefficients du modèle
print('Coefficients : ', regr.coef_)
print('Intercept : ', regr.intercept_)

# Visualiser la régression linéaire
plt.scatter(train['Date_numeric'], train['Plus Haut'], color='black')
plt.plot(train_x, regr.coef_[0][0]*train_x + regr.intercept_[0], '-r')
plt.xlabel("Date (jours depuis le début)")
plt.ylabel("Prix Plus Haut")
plt.title("Régression Linéaire sur les Données d'Entraînement")
plt.show()

# Évaluation du modèle sur les données de test
test_x = np.asanyarray(test[['Date_numeric']])
test_y = np.asanyarray(test[['Plus Haut']])
test_y_ = regr.predict(test_x)

# Afficher les erreurs et le score
print("Mean absolute error: %.2f" % np.mean(np.absolute(test_y_ - test_y)))
print("Residual sum of squares (MSE) : %.2f" % np.mean((test_y_ - test_y) ** 2))
print("R2-score: %.2f" % r2_score(test_y_, test_y))

df_result = df[['Date', 'Plus Haut']].copy()
df_result.to_csv('bitcoin_data_plus_haut.csv', index=False, decimal=',')

# choix des colonnes pouyr l'analyse
x = df['Ouv.']  
y = df['Dernier'] 

# on s'assure que x et y soient numpy
x = x.to_numpy()
y = y.to_numpy()

# Ajout de bruit sur la variable dépendante (Last price)
y_noise = 0.02 * np.random.normal(size=x.size)  
ydata = y + y_noise 

# Ajuster une ligne de régression
coefficients = np.polyfit(x, y, 1)  # 1 pour une régression linéaire
polynomial = np.poly1d(coefficients)
y_fit = polynomial(x)

# Tracé
plt.figure(figsize=(10, 6))
plt.plot(x, ydata, 'bo', label='Données avec Bruit')  # Diagramme de dispersion des données bruitées
plt.plot(x, y_fit, 'r-', label='Ligne de Régression')  # Tracé de la ligne de régression
plt.ylabel('Dernier Prix')
plt.xlabel('Prix d\'Ouverture')
plt.title('Relation entre le Prix d\'Ouverture et le Dernier Prix du Bitcoin')
plt.legend()
plt.show()